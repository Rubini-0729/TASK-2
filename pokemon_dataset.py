# -*- coding: utf-8 -*-
"""pokemon_dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rBGcaPtNdT3w-aYyEyuQHEYYwadAw-gZ
"""

# Install plotly if not already installed
!pip install plotly

# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("pokemon_data.csv")
df.head()

# Summary statistics
df.describe(include='all')

# Clean column names: remove spaces and standardize casing
df.columns = df.columns.str.strip().str.title()
print("Available columns:", df.columns.tolist())

# Plot histogram for HP (now 'Hp' after standardization)
if 'Hp' in df.columns:
    df['Hp'].hist(bins=20)
    plt.title('Distribution of HP')
    plt.xlabel('HP')
    plt.ylabel('Frequency')
    plt.show()
else:
    print("Column 'Hp' not found after cleanup.")

# Step 1: Clean column names (remove spaces, title case for consistency)
df.columns = df.columns.str.strip().str.title()
print("Cleaned Columns:", df.columns.tolist())

# Step 2: Define possible stat columns
expected_stats = ['Hp', 'Attack', 'Defense', 'Speed']

# Step 3: Keep only the ones that actually exist in the DataFrame
available_stats = [col for col in expected_stats if col in df.columns]

# Step 4: Plot if we have at least two stats
if len(available_stats) >= 2:
    sns.pairplot(df[available_stats])
    plt.suptitle('Pairplot of Available Stats', y=1.02)
    plt.show()
else:
    print("Not enough valid numeric columns found for pairplot.")

# Function to parse non-standard Stats string into a dictionary
def parse_stats(stats_str):
    stats_dict = {}
    for item in stats_str.split(','):
        if '=' in item:
            key, value = item.strip().split('=')
            key = key.replace('-', '_').strip().lower()   # Fix keys like "special-attack"
            stats_dict[key] = int(value.strip())
    return stats_dict

# Apply the function to the 'Stats' column
df['Stats'] = df['Stats'].apply(parse_stats)

# Extract relevant stats
df['attack'] = df['Stats'].apply(lambda x: x.get('attack', None))
df['defense'] = df['Stats'].apply(lambda x: x.get('defense', None))

# Plot using Plotly
import plotly.express as px
fig = px.scatter(
    df,
    x="attack",
    y="defense",
    color="Types",        # Assuming 'Types' column exists
    hover_name="Name",
    title="Attack vs Defense"
)
fig.show()